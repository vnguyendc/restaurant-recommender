{"version":3,"file":"erd_tool.js","mappings":";;;;;AAQA;;;;;;;;;;;ACYA;AACA;AAEA;AACA;AAjBA;;;;ACDA;;;ACKA;;;AALA;;;;;;;ACGA;;;;;;;;ACHA;;;;;;;ACaA;;AAEA;AAEA;AACA;;;AAdA;;ACJA;ACIA;;;;;;;AAOA;AAEA;;;;;AAMA;;;AAIA;;;AAIA;;;;;;;;;;;;AAzBA;;;;ACKA;;;AAIA;;;;;;;;AAVA","sources":["webpack:///./node_modules/@projectstorm/react-canvas-core/dist/entities/canvas/CanvasWidget.js","webpack:///./node_modules/@projectstorm/react-canvas-core/dist/entities/layer/TransformLayerWidget.js","webpack:///./node_modules/@projectstorm/react-canvas-core/dist/entities/selection/SelectionBoxWidget.js","webpack:///./node_modules/@projectstorm/react-diagrams-core/dist/entities/label/LabelWidget.js","webpack:///./node_modules/@projectstorm/react-diagrams-core/dist/entities/node/NodeWidget.js","webpack:///./node_modules/@projectstorm/react-diagrams-defaults/dist/label/DefaultLabelWidget.js","webpack:///./node_modules/@projectstorm/react-diagrams-defaults/dist/link/DefaultLinkFactory.js","webpack:///./node_modules/@projectstorm/react-diagrams-defaults/dist/link/DefaultLinkPointWidget.js","webpack:///./node_modules/@projectstorm/react-diagrams-defaults/dist/node/DefaultNodeWidget.js","webpack:///./node_modules/@projectstorm/react-diagrams-defaults/dist/port/DefaultPortLabelWidget.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CanvasWidget = void 0;\nconst React = require(\"react\");\nconst TransformLayerWidget_1 = require(\"../layer/TransformLayerWidget\");\nconst styled_1 = require(\"@emotion/styled\");\nconst SmartLayerWidget_1 = require(\"../layer/SmartLayerWidget\");\nvar S;\n(function (S) {\n    S.Canvas = styled_1.default.div `\n\t\tposition: relative;\n\t\tcursor: move;\n\t\toverflow: hidden;\n\t`;\n})(S || (S = {}));\nclass CanvasWidget extends React.Component {\n    constructor(props) {\n        super(props);\n        this.ref = React.createRef();\n        this.state = {\n            action: null,\n            diagramEngineListener: null\n        };\n    }\n    componentWillUnmount() {\n        this.props.engine.deregisterListener(this.canvasListener);\n        this.props.engine.setCanvas(null);\n        document.removeEventListener('keyup', this.keyUp);\n        document.removeEventListener('keydown', this.keyDown);\n    }\n    registerCanvas() {\n        this.props.engine.setCanvas(this.ref.current);\n        this.props.engine.iterateListeners((list) => {\n            list.rendered && list.rendered();\n        });\n    }\n    componentDidUpdate() {\n        this.registerCanvas();\n    }\n    componentDidMount() {\n        this.canvasListener = this.props.engine.registerListener({\n            repaintCanvas: () => {\n                this.forceUpdate();\n            }\n        });\n        this.keyDown = (event) => {\n            this.props.engine.getActionEventBus().fireAction({ event });\n        };\n        this.keyUp = (event) => {\n            this.props.engine.getActionEventBus().fireAction({ event });\n        };\n        document.addEventListener('keyup', this.keyUp);\n        document.addEventListener('keydown', this.keyDown);\n        this.registerCanvas();\n    }\n    render() {\n        const engine = this.props.engine;\n        const model = engine.getModel();\n        return (React.createElement(S.Canvas, { className: this.props.className, ref: this.ref, onWheel: (event) => {\n                this.props.engine.getActionEventBus().fireAction({ event });\n            }, onMouseDown: (event) => {\n                this.props.engine.getActionEventBus().fireAction({ event });\n            }, onMouseUp: (event) => {\n                this.props.engine.getActionEventBus().fireAction({ event });\n            }, onMouseMove: (event) => {\n                this.props.engine.getActionEventBus().fireAction({ event });\n            }, onTouchStart: (event) => {\n                this.props.engine.getActionEventBus().fireAction({ event });\n            }, onTouchEnd: (event) => {\n                this.props.engine.getActionEventBus().fireAction({ event });\n            }, onTouchMove: (event) => {\n                this.props.engine.getActionEventBus().fireAction({ event });\n            } }, model.getLayers().map((layer) => {\n            return (React.createElement(TransformLayerWidget_1.TransformLayerWidget, { layer: layer, key: layer.getID() },\n                React.createElement(SmartLayerWidget_1.SmartLayerWidget, { layer: layer, engine: this.props.engine, key: layer.getID() })));\n        })));\n    }\n}\nexports.CanvasWidget = CanvasWidget;\n//# sourceMappingURL=CanvasWidget.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransformLayerWidget = void 0;\nconst React = require(\"react\");\nconst styled_1 = require(\"@emotion/styled\");\nconst react_1 = require(\"@emotion/react\");\nvar S;\n(function (S) {\n    const shared = react_1.css `\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tposition: absolute;\n\t\tpointer-events: none;\n\t\ttransform-origin: 0 0;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toverflow: visible;\n\t`;\n    S.DivLayer = styled_1.default.div `\n\t\t${shared}\n\t`;\n    S.SvgLayer = styled_1.default.svg `\n\t\t${shared}\n\t`;\n})(S || (S = {}));\nclass TransformLayerWidget extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n    getTransform() {\n        const model = this.props.layer.getParent();\n        return `\n\t\t\ttranslate(\n\t\t\t\t${model.getOffsetX()}px,\n\t\t\t\t${model.getOffsetY()}px)\n\t\t\tscale(\n\t\t\t\t${model.getZoomLevel() / 100.0}\n\t\t\t)\n  \t`;\n    }\n    getTransformStyle() {\n        if (this.props.layer.getOptions().transformed) {\n            return {\n                transform: this.getTransform()\n            };\n        }\n        return {};\n    }\n    render() {\n        if (this.props.layer.getOptions().isSvg) {\n            return React.createElement(S.SvgLayer, { style: this.getTransformStyle() }, this.props.children);\n        }\n        return React.createElement(S.DivLayer, { style: this.getTransformStyle() }, this.props.children);\n    }\n}\nexports.TransformLayerWidget = TransformLayerWidget;\n//# sourceMappingURL=TransformLayerWidget.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SelectionBoxWidget = void 0;\nconst React = require(\"react\");\nconst styled_1 = require(\"@emotion/styled\");\nvar S;\n(function (S) {\n    S.Container = styled_1.default.div `\n\t\tposition: absolute;\n\t\tbackground-color: rgba(0, 192, 255, 0.2);\n\t\tborder: solid 2px rgb(0, 192, 255);\n\t`;\n})(S || (S = {}));\nclass SelectionBoxWidget extends React.Component {\n    render() {\n        const { rect } = this.props;\n        if (!rect)\n            return null;\n        return (React.createElement(S.Container, { style: {\n                top: rect.top,\n                left: rect.left,\n                width: rect.width,\n                height: rect.height\n            } }));\n    }\n}\nexports.SelectionBoxWidget = SelectionBoxWidget;\n//# sourceMappingURL=SelectionBoxWidget.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LabelWidget = void 0;\nconst React = require(\"react\");\nconst styled_1 = require(\"@emotion/styled\");\nvar S;\n(function (S) {\n    S.Label = styled_1.default.div `\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t`;\n    S.Foreign = styled_1.default.foreignObject `\n\t\tpointer-events: none;\n\t\toverflow: visible;\n\t`;\n})(S || (S = {}));\nclass LabelWidget extends React.Component {\n    constructor(props) {\n        super(props);\n        this.findPathAndRelativePositionToRenderLabel = (index) => {\n            // an array to hold all path lengths, making sure we hit the DOM only once to fetch this information\n            const link = this.props.label.getParent();\n            const lengths = link.getRenderedPath().map((path) => path.getTotalLength());\n            // calculate the point where we want to display the label\n            let labelPosition = lengths.reduce((previousValue, currentValue) => previousValue + currentValue, 0) *\n                (index / (link.getLabels().length + 1));\n            // find the path where the label will be rendered and calculate the relative position\n            let pathIndex = 0;\n            while (pathIndex < link.getRenderedPath().length) {\n                if (labelPosition - lengths[pathIndex] < 0) {\n                    return {\n                        path: link.getRenderedPath()[pathIndex],\n                        position: labelPosition\n                    };\n                }\n                // keep searching\n                labelPosition -= lengths[pathIndex];\n                pathIndex++;\n            }\n        };\n        this.calculateLabelPosition = () => {\n            const found = this.findPathAndRelativePositionToRenderLabel(this.props.index + 1);\n            if (!found) {\n                return;\n            }\n            const { path, position } = found;\n            const labelDimensions = {\n                width: this.ref.current.offsetWidth,\n                height: this.ref.current.offsetHeight\n            };\n            const pathCentre = path.getPointAtLength(position);\n            const labelCoordinates = {\n                x: pathCentre.x - labelDimensions.width / 2 + this.props.label.getOptions().offsetX,\n                y: pathCentre.y - labelDimensions.height / 2 + this.props.label.getOptions().offsetY\n            };\n            this.ref.current.style.transform = `translate(${labelCoordinates.x}px, ${labelCoordinates.y}px)`;\n        };\n        this.ref = React.createRef();\n    }\n    componentDidUpdate() {\n        window.requestAnimationFrame(this.calculateLabelPosition);\n    }\n    componentDidMount() {\n        window.requestAnimationFrame(this.calculateLabelPosition);\n    }\n    render() {\n        const canvas = this.props.engine.getCanvas();\n        return (React.createElement(S.Foreign, { key: this.props.label.getID(), width: canvas === null || canvas === void 0 ? void 0 : canvas.offsetWidth, height: canvas === null || canvas === void 0 ? void 0 : canvas.offsetHeight },\n            React.createElement(S.Label, { ref: this.ref }, this.props.engine.getFactoryForLabel(this.props.label).generateReactWidget({ model: this.props.label }))));\n    }\n}\nexports.LabelWidget = LabelWidget;\n//# sourceMappingURL=LabelWidget.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NodeWidget = void 0;\nconst React = require(\"react\");\nconst _ = require(\"lodash\");\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nconst styled_1 = require(\"@emotion/styled\");\nconst resize_observer_polyfill_1 = require(\"resize-observer-polyfill\");\nvar S;\n(function (S) {\n    S.Node = styled_1.default.div `\n\t\tposition: absolute;\n\t\t-webkit-touch-callout: none; /* iOS Safari */\n\t\t-webkit-user-select: none; /* Chrome/Safari/Opera */\n\t\tuser-select: none;\n\t\tcursor: move;\n\t\tpointer-events: all;\n\t`;\n})(S || (S = {}));\nclass NodeWidget extends React.Component {\n    constructor(props) {\n        super(props);\n        this.ref = React.createRef();\n    }\n    componentWillUnmount() {\n        var _a;\n        this.ob.disconnect();\n        this.ob = null;\n        (_a = this.listener) === null || _a === void 0 ? void 0 : _a.deregister();\n        this.listener = null;\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.listener && this.props.node !== prevProps.node) {\n            this.listener.deregister();\n            this.installSelectionListener();\n        }\n    }\n    installSelectionListener() {\n        this.listener = this.props.node.registerListener({\n            selectionChanged: (event) => {\n                this.forceUpdate();\n            }\n        });\n    }\n    updateSize(width, height) {\n        this.props.node.updateDimensions({ width, height });\n        //now mark the links as dirty\n        try {\n            _.forEach(this.props.node.getPorts(), (port) => {\n                port.updateCoords(this.props.diagramEngine.getPortCoords(port));\n            });\n        }\n        catch (ex) { }\n    }\n    componentDidMount() {\n        // @ts-ignore\n        this.ob = new resize_observer_polyfill_1.default((entities) => {\n            const bounds = entities[0].contentRect;\n            this.updateSize(bounds.width, bounds.height);\n        });\n        const b = this.ref.current.getBoundingClientRect();\n        this.updateSize(b.width, b.height);\n        this.ob.observe(this.ref.current);\n        this.installSelectionListener();\n    }\n    render() {\n        return (React.createElement(react_canvas_core_1.PeformanceWidget, { model: this.props.node, serialized: this.props.node.serialize() }, () => {\n            return (React.createElement(S.Node, { className: \"node\", ref: this.ref, \"data-nodeid\": this.props.node.getID(), style: {\n                    top: this.props.node.getY(),\n                    left: this.props.node.getX()\n                } }, this.props.diagramEngine.generateWidgetForNode(this.props.node)));\n        }));\n    }\n}\nexports.NodeWidget = NodeWidget;\n//# sourceMappingURL=NodeWidget.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultLabelWidget = void 0;\nconst React = require(\"react\");\nconst styled_1 = require(\"@emotion/styled\");\nvar S;\n(function (S) {\n    S.Label = styled_1.default.div `\n\t\tbackground: rgba(0, 0, 0, 0.8);\n\t\tborder-radius: 5px;\n\t\tcolor: white;\n\t\tfont-size: 12px;\n\t\tpadding: 4px 8px;\n\t\tfont-family: sans-serif;\n\t\tuser-select: none;\n\t`;\n})(S || (S = {}));\nclass DefaultLabelWidget extends React.Component {\n    render() {\n        return React.createElement(S.Label, null, this.props.model.getOptions().label);\n    }\n}\nexports.DefaultLabelWidget = DefaultLabelWidget;\n//# sourceMappingURL=DefaultLabelWidget.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultLinkFactory = void 0;\nconst React = require(\"react\");\nconst DefaultLinkModel_1 = require(\"./DefaultLinkModel\");\nconst DefaultLinkWidget_1 = require(\"./DefaultLinkWidget\");\nconst styled_1 = require(\"@emotion/styled\");\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nconst react_1 = require(\"@emotion/react\");\nvar S;\n(function (S) {\n    S.Keyframes = react_1.keyframes `\n\t\tfrom {\n\t\t\tstroke-dashoffset: 24;\n\t\t}\n\t\tto {\n\t\t\tstroke-dashoffset: 0;\n\t\t}\n\t`;\n    const selected = react_1.css `\n\t\tstroke-dasharray: 10, 2;\n\t\tanimation: ${S.Keyframes} 1s linear infinite;\n\t`;\n    S.Path = styled_1.default.path `\n\t\t${(p) => p.selected && selected};\n\t\tfill: none;\n\t\tpointer-events: auto;\n\t`;\n})(S || (S = {}));\nclass DefaultLinkFactory extends react_canvas_core_1.AbstractReactFactory {\n    constructor(type = 'default') {\n        super(type);\n    }\n    generateReactWidget(event) {\n        return React.createElement(DefaultLinkWidget_1.DefaultLinkWidget, { link: event.model, diagramEngine: this.engine });\n    }\n    generateModel(event) {\n        return new DefaultLinkModel_1.DefaultLinkModel();\n    }\n    generateLinkSegment(model, selected, path) {\n        return (React.createElement(S.Path, { selected: selected, stroke: selected ? model.getOptions().selectedColor : model.getOptions().color, strokeWidth: model.getOptions().width, d: path }));\n    }\n}\nexports.DefaultLinkFactory = DefaultLinkFactory;\n//# sourceMappingURL=DefaultLinkFactory.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultLinkPointWidget = void 0;\nconst React = require(\"react\");\nconst styled_1 = require(\"@emotion/styled\");\nvar S;\n(function (S) {\n    S.PointTop = styled_1.default.circle `\n\t\tpointer-events: all;\n\t`;\n})(S || (S = {}));\nclass DefaultLinkPointWidget extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selected: false\n        };\n    }\n    render() {\n        const { point } = this.props;\n        return (React.createElement(\"g\", null,\n            React.createElement(\"circle\", { cx: point.getPosition().x, cy: point.getPosition().y, r: 5, fill: this.state.selected || this.props.point.isSelected() ? this.props.colorSelected : this.props.color }),\n            React.createElement(S.PointTop, { className: \"point\", onMouseLeave: () => {\n                    this.setState({ selected: false });\n                }, onMouseEnter: () => {\n                    this.setState({ selected: true });\n                }, \"data-id\": point.getID(), \"data-linkid\": point.getLink().getID(), cx: point.getPosition().x, cy: point.getPosition().y, r: 15, opacity: 0.0 })));\n    }\n}\nexports.DefaultLinkPointWidget = DefaultLinkPointWidget;\n//# sourceMappingURL=DefaultLinkPointWidget.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultNodeWidget = void 0;\nconst React = require(\"react\");\nconst _ = require(\"lodash\");\nconst DefaultPortLabelWidget_1 = require(\"../port/DefaultPortLabelWidget\");\nconst styled_1 = require(\"@emotion/styled\");\nvar S;\n(function (S) {\n    S.Node = styled_1.default.div `\n\t\tbackground-color: ${(p) => p.background};\n\t\tborder-radius: 5px;\n\t\tfont-family: sans-serif;\n\t\tcolor: white;\n\t\tborder: solid 2px black;\n\t\toverflow: visible;\n\t\tfont-size: 11px;\n\t\tborder: solid 2px ${(p) => (p.selected ? 'rgb(0,192,255)' : 'black')};\n\t`;\n    S.Title = styled_1.default.div `\n\t\tbackground: rgba(0, 0, 0, 0.3);\n\t\tdisplay: flex;\n\t\twhite-space: nowrap;\n\t\tjustify-items: center;\n\t`;\n    S.TitleName = styled_1.default.div `\n\t\tflex-grow: 1;\n\t\tpadding: 5px 5px;\n\t`;\n    S.Ports = styled_1.default.div `\n\t\tdisplay: flex;\n\t\tbackground-image: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2));\n\t`;\n    S.PortsContainer = styled_1.default.div `\n\t\tflex-grow: 1;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\n\t\t&:first-of-type {\n\t\t\tmargin-right: 10px;\n\t\t}\n\n\t\t&:only-child {\n\t\t\tmargin-right: 0px;\n\t\t}\n\t`;\n})(S || (S = {}));\n/**\n * Default node that models the DefaultNodeModel. It creates two columns\n * for both all the input ports on the left, and the output ports on the right.\n */\nclass DefaultNodeWidget extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.generatePort = (port) => {\n            return React.createElement(DefaultPortLabelWidget_1.DefaultPortLabel, { engine: this.props.engine, port: port, key: port.getID() });\n        };\n    }\n    render() {\n        return (React.createElement(S.Node, { \"data-default-node-name\": this.props.node.getOptions().name, selected: this.props.node.isSelected(), background: this.props.node.getOptions().color },\n            React.createElement(S.Title, null,\n                React.createElement(S.TitleName, null, this.props.node.getOptions().name)),\n            React.createElement(S.Ports, null,\n                React.createElement(S.PortsContainer, null, _.map(this.props.node.getInPorts(), this.generatePort)),\n                React.createElement(S.PortsContainer, null, _.map(this.props.node.getOutPorts(), this.generatePort)))));\n    }\n}\nexports.DefaultNodeWidget = DefaultNodeWidget;\n//# sourceMappingURL=DefaultNodeWidget.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultPortLabel = void 0;\nconst React = require(\"react\");\nconst react_diagrams_core_1 = require(\"@projectstorm/react-diagrams-core\");\nconst styled_1 = require(\"@emotion/styled\");\nvar S;\n(function (S) {\n    S.PortLabel = styled_1.default.div `\n\t\tdisplay: flex;\n\t\tmargin-top: 1px;\n\t\talign-items: center;\n\t`;\n    S.Label = styled_1.default.div `\n\t\tpadding: 0 5px;\n\t\tflex-grow: 1;\n\t`;\n    S.Port = styled_1.default.div `\n\t\twidth: 15px;\n\t\theight: 15px;\n\t\tbackground: rgba(255, 255, 255, 0.1);\n\n\t\t&:hover {\n\t\t\tbackground: rgb(192, 255, 0);\n\t\t}\n\t`;\n})(S || (S = {}));\nclass DefaultPortLabel extends React.Component {\n    render() {\n        const port = (React.createElement(react_diagrams_core_1.PortWidget, { engine: this.props.engine, port: this.props.port },\n            React.createElement(S.Port, null)));\n        const label = React.createElement(S.Label, null, this.props.port.getOptions().label);\n        return (React.createElement(S.PortLabel, null,\n            this.props.port.getOptions().in ? port : label,\n            this.props.port.getOptions().in ? label : port));\n    }\n}\nexports.DefaultPortLabel = DefaultPortLabel;\n//# sourceMappingURL=DefaultPortLabelWidget.js.map"],"names":[],"sourceRoot":""}